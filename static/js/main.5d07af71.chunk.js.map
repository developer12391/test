{"version":3,"sources":["components/Products.module.css","common/Search.module.css","logo.svg","api/api.js","redux/product-reducer.js","components/Product.js","components/Products.js","common/SearchBar.js","components/ProductsContainer.js","App.js","serviceWorker.js","redux/redux-store.js","index.js"],"names":["module","exports","instance","axios","baseURL","productsAPI","get","then","response","data","initialState","products","name","_handleNameChange","type","productsReducer","state","action","Product","product","id","bsr_category","stars","brand","weight","updated_at","price","currency","src","img","alt","className","s","href","link","size","daily_sales","Products","React","memo","map","u","index","key","Filters","props","input","createRef","this","getProducts","current","value","searchForm","labelText","for","placeholder","onChange","find","ref","searchInput","Component","ProductsContainer","connect","productPage","filter","toLowerCase","indexOf","dispatch","a","App","Boolean","window","location","hostname","match","reducers","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d07af71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"product\":\"Products_product__2aAW5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"labelText\":\"Search_labelText__2dhjB\",\"searchInput\":\"Search_searchInput__f2B_Q\",\"searchForm\":\"Search_searchForm__2Vp7c\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://demo4233545.mockable.io/',\r\n})\r\n\r\nexport const productsAPI = {\r\n    getProducts() {\r\n        return instance.get(`products`).\r\n        then(response=>response.data)\r\n    }\r\n}","import {productsAPI} from \"../api/api\";\r\n\r\nconst SET_PRODUCTS = 'SET_PRODUCTS';\r\nconst SET_PRODUCTS_NAME = 'SET_PRODUCTS_NAME';\r\n\r\nlet initialState = {\r\n    products: [],\r\n    name: \"\"\r\n}\r\nconst productsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_PRODUCTS:\r\n            return {\r\n                ...state, products: [...action.products]\r\n            }\r\n        case SET_PRODUCTS_NAME:\r\n            return {\r\n                ...state, name: action.name\r\n            }\r\n\r\n            \r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport const setProductsAC = (products) => ({type: SET_PRODUCTS, products});\r\nexport const _handleNameChange = name =>  ({type: SET_PRODUCTS_NAME, name});\r\n\r\nexport const getProducts = (name) => {\r\n    return async (dispatch) => {\r\n        dispatch(_handleNameChange(name));   \r\n        let data = await productsAPI.getProducts()\r\n       \r\n            dispatch(setProductsAC(data.products));   \r\n    }\r\n}\r\n\r\nexport default productsReducer;","import React from 'react';\r\nimport s from './Products.module.css';\r\n\r\nconst Product = ({product, id}) => (\r\n    <>\r\n        <td>{id+1}</td>\r\n        <td>{product.name}</td>\r\n        <td>{product.bsr_category}</td>\r\n        <td>{product.stars}</td>\r\n        <td>{product.brand}</td>\r\n        <td>{product.weight}</td>\r\n        <td>{(product.updated_at)}</td>\r\n        <td>{product.price} {product.currency}</td>\r\n        <td><img src={product.img} alt=\"product\" className={s.product}/></td>\r\n        <td><a href={product.link}>Product Link</a></td>\r\n        <td >{product.size}</td>\r\n        <td>{product.daily_sales}%</td>\r\n    </>\r\n);\r\n\r\nexport default Product;","import React from 'react';\r\nimport s from './Products.module.css';\r\nimport Product from \"./Product\";\r\n\r\n\r\nlet Products = React.memo(({products,name,_handleNameChange, ...props}) => {\r\n    return (<>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                      <th>Id</th>\r\n                        <th>Name</th>\r\n                        <th>Category</th>\r\n                        <th>Stars</th>  \r\n                        <th>Brand</th> \r\n                        <th>Weight</th>\r\n                        <th>Updated</th>\r\n                        <th>Price</th>\r\n                        <th>Image</th>\r\n                        <th>Link</th>\r\n                        <th>Size</th>\r\n                        <th>Daily sales</th>\r\n                     </tr>\r\n                </thead>\r\n                <tbody>\r\n                \r\n                {products.map((u, index) => <tr >\r\n                    <Product product={u}  key={index} id={index}/>\r\n                          </tr>\r\n                )}\r\n                 </tbody>\r\n                </table>\r\n            </>\r\n\r\n    )\r\n\r\n})\r\nexport default Products;","import React, {Component} from 'react';\r\nimport s from \"./Search.module.css\"\r\nclass Filters extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.input = React.createRef();\r\n    }\r\n\r\n    find() {\r\n        this.props.getProducts(this.input.current.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n             <div className={s.searchForm}>\r\n                <label className={s.labelText} for=\"n\">Search:\r\n                <input placeholder=\"Name of product...\" onChange={()=>this.find()} ref={this.input} type=\"text\" className={s.searchInput} />\r\n                </label>\r\n               \r\n            </div>\r\n                            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Filters;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {getProducts} from \"./../redux/product-reducer\";\r\nimport s from './Products.module.css'\r\nimport Products from './Products'\r\nimport Filters from \"./../common/SearchBar\";\r\n\r\nclass ProductsContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getProducts(this.props.name);\r\n    }\r\n    \r\n\r\n    render() {\r\n        return <>\r\n            <Filters  name={this.props.name} \r\n                    getProducts={this.props.getProducts}/>\r\n            <Products \r\n                   products={this.props.products}\r\n                   name={this.props.name}/>\r\n        </>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps =(state) => {\r\n    return {\r\n        products: state.productPage.products.filter(({name}) => name.toLowerCase().indexOf(state.productPage.name.toLowerCase()) !== -1),\r\n        name: state.productPage.name\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{getProducts})(ProductsContainer);","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ProductsContainer from './components/ProductsContainer';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <ProductsContainer></ProductsContainer>\n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import productsReducer from \"./product-reducer\";\r\nimport {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleWare from 'redux-thunk';\r\n\r\nlet reducers = combineReducers({\r\n    productPage: productsReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, /* preloadedState, */ composeEnhancers(\r\n    applyMiddleware(thunkMiddleWare)));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from './redux/redux-store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}